// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleNFT.cdc (7.169kB)
// ../../../contracts/ExtendedRoyaltyUtils.cdc (2.399kB)
// ../../../contracts/MetadataViews.cdc (6.854kB)
// ../../../contracts/NonFungibleToken.cdc (4.832kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x4f\x6f\xe3\xba\x11\xbf\xfb\x53\xcc\xcb\x61\x2b\xa3\x89\xd5\x02\x45\x0f\x46\xbc\xd9\xc5\xe6\x19\xcd\xe1\x05\x8b\xac\xdb\x1e\x16\x41\x1f\x2d\x8e\x63\x22\x12\x69\x90\x94\x5d\x35\xcf\xdf\xbd\x18\x52\x7f\x28\x89\x4a\xf2\xba\x97\x0a\x8b\x5d\x4b\x9c\x19\xce\xff\xf9\x91\x9b\xa6\xb0\xd9\x0b\x03\xc2\x00\x93\x80\xff\x66\xc5\x21\x47\x10\xf4\x77\x81\xd2\x32\x2b\x94\x04\xb5\x03\x06\xeb\x5c\x9d\xe0\x5e\xc9\xab\x75\x29\x9f\xc4\x36\x47\xd8\xa8\x67\x94\xb3\x34\x85\x3b\x4b\xfc\x52\x59\x38\x30\x6d\x89\xdc\xee\x11\xd4\x6e\x27\x32\xc1\x72\x30\x96\x49\xce\x34\x87\x6d\x69\x41\x58\x60\xc6\x94\x05\x72\xb0\x0a\xb6\x48\xfc\x47\xd4\x15\x18\x51\x88\x9c\x69\xfa\xba\x57\x27\x28\x98\xac\xe0\x7e\xbd\x31\x70\x52\x65\xce\x3b\x95\x9c\xec\x4c\x69\x84\x5d\x29\x33\xd2\x8f\xe5\xc2\x56\x8b\xd9\x4c\x14\x07\xa5\x2d\xe9\xd8\xa8\xe8\x34\x84\x9d\x56\x05\x5c\x2c\xd2\xe1\xc2\x22\xe3\xd9\x45\xc3\xf5\x0b\x5a\xc6\x99\x65\xff\x10\x78\x32\x2d\x4b\xef\xab\xa7\x9f\x1d\xca\x2d\x64\x4a\x5a\xcd\x32\x0b\x3f\x7b\x8f\xdd\xaf\x37\xcb\xf1\xc6\x2f\xb3\x19\x00\x00\x31\x1c\x9d\x65\x96\xe5\xdf\xca\xc3\x21\xaf\x96\xf0\xf7\x3b\x69\xff\xfa\x97\x8e\x00\x8f\x64\xdb\x97\x5a\xee\x9d\x14\x56\xb0\x5c\xfc\x07\x79\x32\x1f\xd0\xfc\x53\xd8\x3d\xd7\xec\x94\x08\xde\x88\xb9\x74\x0a\x2f\xe1\x33\xe7\x1a\x8d\xb9\x19\xb2\xdc\xe2\x41\x19\x61\x7b\x1c\x56\x85\xf4\x2d\x43\x8e\xa4\x45\x9e\xa3\x73\xed\x37\xab\x34\x7b\xc2\xaf\xcc\xee\x97\x10\xbc\x4c\x90\x7f\x2d\xb7\xb9\xc8\x3c\x75\xf7\xbb\x47\xfc\x8b\x90\x16\xf5\xa4\xdc\x96\x56\xa3\x51\xa5\xce\x10\xa2\xae\x5d\xdc\xdd\xaf\x37\x97\xfd\xa0\x2d\x1e\xd0\xa8\xfc\x88\x1a\x5e\x9c\x94\x70\xd7\xce\xf0\xd9\x68\x4d\xb2\x02\x49\x09\x2d\xe4\xd3\x68\x91\xa3\xc9\xb4\x38\x90\x71\x93\x34\x76\x5f\x16\x5b\xc9\x44\x3e\xa2\x60\x59\x86\xc6\x24\x06\xf3\xdd\xdc\x91\x6a\x55\xb1\xdc\x0a\x34\x4b\xf8\x3e\x50\xde\xad\x54\x8f\x9d\x7e\x42\x0a\x9b\xb4\x6f\xee\x4b\x17\xbe\xde\xf7\xd0\x82\xfe\x4a\x44\xfd\x3e\xc1\x48\xf7\xfe\xf2\x3b\xf4\x6d\x48\xe7\x81\xdb\xe9\x21\xa3\x17\x82\xc3\x0a\x04\x1f\x2f\x90\xca\xb0\x72\x9a\x8f\x17\x03\xad\x61\x15\xda\x30\x26\x6d\xf5\x87\x55\x67\xcb\x98\xac\xb5\x03\x56\x9d\x4d\x2d\xd9\xd9\xfd\xea\xc5\x75\x57\x4a\x78\x42\xeb\x6c\x4d\xe6\x4b\xf8\xbe\xa9\x0e\xf8\x38\x30\x51\xa3\x2d\xb5\x84\xef\xbd\x8f\xf4\x10\xf1\x75\xdf\x5f\xb7\xc2\x1c\x72\x56\x7d\x4c\xe6\x97\xef\x21\x7f\x68\x94\xfc\x58\xd7\x7f\xf3\x3c\x06\x5a\x8f\x34\xd6\xbe\x02\x48\x44\xf2\x2f\x38\x0a\x3c\x2d\x9d\xf0\xf9\x12\x3e\xcb\xea\x9b\xd5\x65\x66\x6f\x86\x71\x3a\x09\x9b\xed\x1d\xf1\x60\x85\x9e\x8c\x19\x7c\xdd\x9c\xe5\x88\x27\x70\x4d\x94\x29\x89\x72\x40\x9b\xc8\x6d\x82\x8c\x3d\xd5\x3c\xbd\xbc\x1e\xe6\xcc\x34\x5b\x90\xed\x7d\xcd\xfe\xb6\xd9\x7c\x5d\x8b\x1c\xa7\x55\xa3\xa7\xd4\xf9\x72\x90\x76\x93\xf4\xf3\xe8\xca\xf8\xeb\x94\x83\xc3\x04\xf8\x1d\x2e\x6e\xd9\xa6\x2d\xe9\x17\xc4\x3b\xd4\x3c\xc7\x92\x5e\x06\xb6\x7b\x82\x73\xa4\x79\xbb\x66\xbf\x63\x19\x06\x83\x72\x38\x2e\x06\xed\x9a\xf2\x98\xd7\xf3\xca\x52\xaf\x5f\xc2\xa7\x51\xfb\xbf\x5f\x6f\xe6\xb1\x7a\xbd\xbb\xf5\xd5\xea\xbb\xe4\xe3\x88\x64\xab\xb4\x56\xa7\xfb\xf5\x26\x18\x85\xf3\x25\x7c\x88\x6d\x30\xc1\xdc\x19\x32\x90\xd1\x2d\x10\xf7\xb0\xcc\x0e\xca\xd8\x48\x7d\x25\x1a\x4d\x99\x5b\x58\xad\xc8\xa3\x73\xf8\xed\xb7\xe6\xd3\x8d\x6b\x9e\xd4\x3d\x27\xe2\x7f\xf1\x85\x49\xc2\x5c\x5e\xad\xc0\xc1\xa0\x71\x87\x1a\x65\x86\x4b\x07\x96\xee\x6e\x1b\x48\xe6\x63\x87\xbc\xa3\x20\xe0\x26\x64\xa6\xb4\xc6\xcc\x5e\x4c\x84\x7d\x3a\xbe\x5d\x2c\x97\xaf\x44\xf8\x72\x3c\xbf\xbf\x6a\x75\x14\x1c\x75\x64\xe9\x01\x33\x14\xc7\xe8\xd2\x58\x70\x1c\x01\x74\x74\x81\xcb\xd3\x14\xb8\xf0\x80\x51\x57\xe4\x11\x72\x55\xa6\xe4\x4e\xe9\x42\xc8\x27\x70\xc9\x66\x42\x72\x22\x20\x60\xdc\xd9\x6b\xab\x03\xc2\x49\xd8\x3d\xa1\xe5\x5f\x7d\xec\x7f\x25\x07\xef\x04\xe6\xbc\x97\x31\x84\xf8\xd4\x49\x22\x27\x10\xbb\x84\x4f\x2f\x9e\x3a\x82\x65\xee\xd7\x9b\x73\x7f\xec\x43\x12\x9d\xa6\xad\x38\xb8\xbe\x82\x97\x73\x6c\x12\xa4\xa9\x53\x8f\xf0\x21\x68\x2c\xd4\x11\x1d\xb0\x27\x4b\x1c\xa6\xf5\xe0\xb9\xf5\x0e\x93\x1c\x3c\x91\xb0\x84\xbc\xdd\x32\xcb\x73\xd4\xa3\xec\x6f\xc4\x26\xcd\x8f\xbb\xdb\x20\xfb\xa3\x25\x3a\xb0\xc1\x61\x25\x07\x8c\xaf\xaf\x06\x06\x2d\xbc\xae\xc9\x33\x56\x4b\xe8\x36\x98\xc3\xcd\x0d\x1c\x98\x14\x59\x72\x51\x08\x63\x28\x4c\xf7\xeb\xcd\xc5\x7c\xd6\x13\x8c\x85\x18\xc0\x62\xb7\xcd\x42\xf0\x06\x18\xb7\xbb\xe9\x9b\x05\xf3\xa0\x77\x20\xa3\x6e\x6b\xd7\x57\x8e\x75\xc2\xb5\x75\x5f\x02\xcb\x9e\xc9\xaf\xce\xad\xe4\x42\xc6\x79\xcf\x83\xad\x83\x4d\x90\x72\xa1\xa0\x96\xa9\xae\xcf\x9a\x51\x70\x60\x5a\xb3\xea\x7f\x6b\x88\xaf\xb9\xdb\xff\x60\xe6\x27\xf8\xd4\xef\x53\xb3\x11\x4f\xd7\xd5\x08\x53\xd5\x8e\xec\x93\x91\x05\x9c\x3b\x95\x25\x9e\x6a\xe1\xb5\x0d\x41\x8d\x9d\xf6\x22\xdb\xb7\x69\xe8\xce\x84\x39\x07\x25\x71\xb4\xa7\xca\xf9\x26\x9e\x19\xdf\x05\x7f\x6c\x0d\x88\x84\x3d\x3c\xda\x50\xbc\xe9\x58\xf3\x76\xb4\x39\x1a\xab\x55\xd5\xee\x3b\x11\x6f\x3f\x51\xea\xdc\x70\x85\xe4\xc2\xd3\xb4\x53\x5a\xb3\x7b\x66\x81\x69\x1a\x75\x83\xd8\xbf\x63\x3e\xc5\xf1\xe4\xa0\x34\x9e\xb1\x32\x13\xfa\xb5\xe3\x8c\x64\xfb\x46\xd5\xf4\x75\xab\x9a\xba\x9f\x56\x2c\x4d\xc1\x28\x6f\x41\x57\xf8\x90\x31\x02\x92\x8c\x83\xb0\x06\x8a\xba\xbf\xba\x8c\x25\x82\xe6\xeb\x5e\x71\xf3\x43\xe3\x35\x6e\xfb\x87\x48\xf4\x99\x79\x63\x40\x9f\x67\x63\xf0\xfe\x43\xc3\x5a\xec\x62\x59\xf8\x93\x9b\xd1\x91\x21\x9e\xa6\xf0\x45\x23\xb3\xe8\x32\xa4\xb4\x7b\xa5\xe9\xe4\x3e\x88\x46\x9e\xab\x13\x70\x75\x92\x19\x33\x36\x3c\x25\x86\x85\xa0\x71\x07\xab\x29\x2f\x90\xe8\x37\x5c\x31\x70\x27\x89\xa3\xa2\x1f\xd8\x3b\x98\xf3\x6f\xe3\xbb\x09\xf7\xd2\xd4\x6d\x66\xee\xc0\xc1\x9f\x65\xf5\x50\x4f\xcd\x97\xf8\x90\x3e\x47\xfa\x95\xdc\xd9\x1f\x36\x9f\xe4\x60\x07\x86\x56\x4e\xe8\x5b\x4e\xa8\xad\x0e\xf8\x28\xeb\xde\x61\x44\xcc\x49\x75\x77\x19\x0d\xf1\xa6\xeb\xf4\xcd\x8b\xc3\xac\x34\x25\x5f\x13\x3c\x6e\xae\xb9\xea\x56\x23\x2b\x25\xd1\x15\xa9\x2b\x47\xab\x20\xab\x73\xcf\xf5\x62\x2c\x0e\xb6\x1a\x16\x7b\x13\x35\x4f\xf9\x33\x91\x74\x10\x29\x89\x8e\xef\x28\x84\x6a\x87\x64\xb3\x67\x28\x65\xa0\xfd\x43\x8b\x99\xbc\xda\xc0\x78\x21\x24\x28\x0d\x46\x51\xff\xa0\x59\xde\xdc\xf9\xf9\x2b\x3e\x75\x92\xf5\x9d\x60\x2d\x82\x6d\x73\x57\x3a\x85\x90\xd6\x19\xd7\xba\x2b\x4d\xa3\x17\x45\xfe\x72\xa9\xb9\x77\xab\xa5\x10\x37\x05\x94\xfe\x35\xb5\x97\xe8\xdd\xc3\x38\xf7\x7a\x77\x3b\x1c\xce\xcd\xa4\xa7\x3f\xb2\xc6\xce\x99\x38\x08\x24\x19\x01\x80\x2a\x1d\x26\xb1\x7b\x14\x3a\xfc\xdc\x56\xfe\xa8\x70\x6a\x6d\x92\x41\xf6\xd5\xb2\x97\xf0\xe1\xe5\x4d\xd4\x7b\xfe\x3f\xbd\xfd\x19\x42\x84\x5e\x5e\x0e\x0b\x8e\xe0\xb1\x44\x37\xbb\xba\x74\x1a\x39\x06\xea\x5b\xaf\xa0\x72\x83\x5b\xd4\xf1\x41\xdf\xfb\x22\x7e\x77\xd0\xf3\xc6\xab\xd7\x05\x81\x5b\xda\x9f\x63\xaa\xc0\x3b\xf1\xd3\xf4\x7c\xe4\x91\x57\xb2\xea\x0f\x06\x58\x96\xa9\x52\xda\x5e\x4e\x8d\x13\x09\xc2\x7c\x59\x0c\x80\xe1\xf5\x95\xf7\xe9\x60\xeb\xb8\xfb\x60\x35\xb5\xf0\xc7\xba\x91\x27\x7f\x9e\xc7\xbb\x93\xbb\x9b\x9c\xf7\x0f\x57\xdd\x9d\xb5\xb3\xcc\xc9\x03\xe3\x04\xb6\x64\xfe\xf2\xa4\xa7\xc2\x9f\x7a\xc5\xfa\x0d\x3d\x16\xa1\x10\x72\x38\x30\xbb\x37\x7d\xe6\xe8\xdd\x34\xac\x20\x35\xfe\x35\xc5\xc8\x31\x74\x4a\x44\x77\x47\x4d\x12\x7c\xbf\x7d\x87\x80\xd1\x1d\x76\x7c\x7f\x4f\xd6\x33\xaf\x81\x09\x41\xe3\xec\x1a\x18\xf5\x1d\xc3\x8e\x58\x9f\x24\x6a\x81\x2d\x3b\xcd\xb5\xa0\xc5\xbc\xd2\x84\x5b\x45\xeb\x8c\x5a\x90\xd4\xe4\xfa\xaa\xe3\x0e\x70\x72\xd4\xa1\xf3\x9e\xd6\x6d\x21\xd7\x13\x29\x63\x07\xb6\x15\xb9\xb0\x15\xec\x94\x9e\x42\x97\x3d\x0d\x72\x21\x9f\xaf\xc3\x01\xdc\x6d\xfb\x76\xc3\xbb\x0c\xf3\x74\xfa\x9a\xe1\xfc\x31\x19\x9f\x99\x63\xc1\x1e\x34\x41\xa6\x9f\xd0\xbe\xe6\x8d\x59\xa4\xa2\xc3\x60\xd6\x63\xe7\xf7\x04\xb2\xf0\x2c\xbd\xd6\xe7\xc5\xbc\x11\x43\xcf\x18\xc4\x6f\x94\x8c\x81\x92\xee\x84\x34\xfd\x7f\x4a\xe7\xd9\x79\xf6\xdf\x00\x00\x00\xff\xff\xfd\x10\x37\x2a\x01\x1c\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x44, 0x5e, 0x4a, 0xf7, 0xbc, 0xba, 0x5e, 0x92, 0x41, 0x30, 0xf5, 0xf8, 0xf6, 0x9, 0xf3, 0x66, 0xe4, 0xd5, 0x0, 0x12, 0x11, 0xcd, 0xd2, 0xd8, 0xe6, 0xc9, 0x2, 0x6f, 0x17, 0xe3, 0x40}}
	return a, nil
}

var _extendedroyaltyutilsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x41\x6f\x23\x37\x0f\xbd\xfb\x57\xf0\xdb\xc3\x87\xb8\x48\xed\x4b\xd1\x83\xd1\x14\x48\x03\x04\xc8\x61\xbb\x45\xd6\xd9\x16\x58\x2c\x10\x5a\xc3\xf1\x10\xd6\x48\x02\x45\xd9\x31\x82\xfc\xf7\x42\x9a\xf1\x78\x6c\x6f\x0e\x45\xab\x4b\x9c\x11\xc5\xf7\x48\x3d\x3e\x71\x1b\xbc\x28\xdc\x27\xb7\xe6\x95\xa5\xa5\xdf\x90\x83\x5a\x7c\x0b\x1f\x66\xf3\xa4\x6c\x59\xf7\xf3\x93\xdd\x99\xa9\xcc\x87\xc9\x7c\x3e\x87\x65\xc3\x11\x38\x02\xc2\x96\x24\xb2\x77\xe0\x6b\xd0\x86\x40\xfc\x1e\xad\xee\x61\xcb\xb4\x8b\xa0\x0d\x2a\x34\x18\x61\x45\xe4\x80\x5e\x94\x5c\x45\x15\xec\x58\x1b\x08\x5e\xd1\x29\xa3\x85\x1e\x0b\xea\xe4\x8c\xb2\x77\xb1\x40\x3c\x68\x07\xb0\xf3\xb2\x01\x76\x10\xc4\xaf\x85\x62\x9c\x84\xb4\x02\xe3\x9d\x0a\x1a\x85\x8f\xa4\x58\xa1\xe2\x97\x82\xf7\x3a\x99\x00\x00\xe4\xe3\x9f\x42\x4e\x85\x16\xd8\x29\x49\x8d\x86\x40\x7d\x4e\xb2\xe5\x8a\x0a\xd5\x86\x6c\x20\x19\xa1\x1e\x8e\xd6\x5e\x60\x45\xaa\x24\xe5\xf0\x5a\x50\xbf\x53\x61\x54\x74\x15\x4a\x5f\x4d\xde\x69\x51\x36\xa4\xc1\xa2\xa1\x21\x57\x6c\x51\xf4\x48\xd7\xcb\x40\x21\xc3\x8f\x29\xf5\x88\x4f\x0f\xf3\xa7\xbf\x66\x43\x1d\xff\x72\x5d\xb6\xe3\xbc\xea\x4c\xa1\x46\x93\x6f\x00\x95\x4e\x2a\x1c\x17\xff\x5f\xf1\x19\x08\xdd\x5a\xeb\x77\x05\x2e\xa2\x25\xb0\x1c\x73\xf5\xea\x61\x8b\x96\xab\x4c\x65\xd7\x90\x36\xf9\x5b\x93\x9b\xe3\xa8\x66\x83\xb2\x3f\xbb\x86\x21\x1f\x47\x48\x91\xdd\xba\x6c\x1a\xdf\x06\xd4\xac\x5b\x30\x18\x70\xd5\xe9\xab\x5c\xd4\x2e\x4b\x72\x95\xf6\x24\x80\xc6\x50\xd0\x38\x2b\x39\xb2\xaa\xea\xe4\xc0\x34\x64\x36\x7f\xa2\xb5\xa4\xcb\x7d\xa0\xab\x0e\x87\x29\x2e\xe0\xf1\xf0\xf3\x1a\x74\x1f\x68\xe9\xef\x72\xec\x02\x72\xdc\x74\x01\xbf\x79\x6f\xe1\xb5\x24\xcb\x6b\x8b\x92\xa5\x7f\xe7\x45\xc8\x94\x5c\x70\x03\x2a\x89\x86\x88\xac\xb3\x63\xaf\x21\x92\xad\x67\x26\xe9\x83\xab\x7d\x1c\x25\xca\x8b\x6b\xf8\x5f\x1f\x3a\x13\x32\xc4\x5b\x92\x19\xc7\x07\x97\x55\x68\xe8\x6a\xc4\x67\x7a\x76\x34\xaf\x0b\x1e\x35\xda\x48\x17\x61\x2b\x21\xdc\x9c\x7c\x7d\x9b\x5c\xfe\x12\xd2\x24\xee\x2c\xe7\xa4\x8b\x19\xae\xe3\x73\x20\xc3\xf9\xc6\xc6\xa3\x73\xfb\xf1\xd3\xd3\xef\xcb\xf2\x5f\xb6\x93\xa2\xbd\x48\xae\xca\x7f\x11\x62\x7f\x04\x0e\x05\x0e\xf7\x12\x55\x92\xd1\xbe\xff\xfb\x7b\x2f\x87\x41\x3f\x04\x58\xd2\xe1\xd4\x02\xee\x86\x2b\xff\xe5\xff\xb7\x6e\xff\x48\xd1\x27\x31\xf4\x7a\xea\x65\x8f\x7d\xfc\xdb\xaf\xc7\x5c\x9d\xb5\x11\x60\xeb\x93\xd3\x03\xed\x35\x6f\xc9\x75\x94\x3b\x47\xdb\xf9\x64\x2b\x58\x93\x82\x0a\xba\x58\x93\x08\x95\x22\x46\x52\x65\x94\xfd\x05\x47\x93\x74\x01\x4f\xf7\xfc\xf2\xf3\x4f\x17\x7b\x15\x45\x23\x5c\xc6\x74\x01\x9f\x55\xd8\xad\x8f\xc4\xd8\xb1\x5e\xe5\x0a\x03\x93\xd3\x7f\x5e\xe2\xf5\x18\xfa\xfa\x7b\x58\xe7\xb2\x29\x6a\x3c\xf4\x14\x6e\x60\x00\xbf\x8c\x32\x49\xe1\x26\x03\x5c\x6e\x8d\x80\xe0\x66\x0c\x7b\xa6\xab\x91\x72\x1e\x8b\xbc\x62\xe9\x65\x76\x85\xd3\x81\x67\xea\x5f\x15\x47\x5d\xcb\x2b\xaa\x92\x51\xaa\xba\x97\x6b\xf0\x93\x20\x6c\x08\xd0\x55\x50\x71\x54\xe1\x55\xd2\x12\x3f\xc0\x94\x94\x94\x35\xa7\xbc\xa5\x63\x79\xbd\x1d\x0c\x8f\x5c\x4b\xda\xf8\x6c\xf2\xd6\xc2\x8a\x20\x45\xaa\x93\x2d\xc2\x4d\xa1\xbc\x9f\x15\xd7\x35\x09\x39\x05\xb4\x6b\x2f\xac\x4d\x1b\x3b\x62\x92\x13\x9f\x3c\x8a\x68\x13\xf5\x36\xf5\xdc\xab\x39\x77\xef\xf9\x1a\x9e\x33\xeb\x3f\x32\xe9\xe7\xcc\x7a\xe0\xe0\x8b\x05\x6e\x51\x18\x9d\x46\xb8\xa2\x97\x1f\x61\x65\xbd\xd9\x80\x72\x4b\x51\xb1\x0d\xd3\xae\x21\x15\x05\x72\x55\x04\xef\x0a\x26\xb7\xc1\x52\x4b\xf9\xf1\x3b\x74\x70\xe0\x77\xea\x78\x32\x8c\xd5\x3b\x66\x37\x50\x3b\x08\x68\xba\x80\xaf\xc7\x61\xfc\x76\x66\x7a\x7d\xbe\x2f\xb9\xd8\x78\x16\x79\x03\x5f\xbf\xbd\xe7\x7f\x03\xf8\x7b\x26\x78\x92\x78\x86\x21\xd7\x7b\xf5\x38\x62\x7f\x9c\x8f\x73\xaf\xec\xf5\x2f\xc7\x9e\xc3\x0f\xc7\xba\xce\x06\xe2\x10\x35\xfa\x38\x9d\xbe\x6f\x84\x27\xb4\x7a\x35\xbf\x4d\xe0\xef\x00\x00\x00\xff\xff\x89\x6a\xef\x7c\x5f\x09\x00\x00"

func extendedroyaltyutilsCdcBytes() ([]byte, error) {
	return bindataRead(
		_extendedroyaltyutilsCdc,
		"ExtendedRoyaltyUtils.cdc",
	)
}

func extendedroyaltyutilsCdc() (*asset, error) {
	bytes, err := extendedroyaltyutilsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExtendedRoyaltyUtils.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0xbe, 0x10, 0x55, 0x38, 0xd8, 0xa4, 0xac, 0xe7, 0xcb, 0x71, 0xba, 0xd4, 0xdb, 0xa6, 0x3a, 0xc0, 0x24, 0x88, 0x21, 0x21, 0x42, 0x2e, 0x79, 0x95, 0x16, 0xb1, 0x70, 0xba, 0xc5, 0x82, 0xa5}}
	return a, nil
}

var _metadataviewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x6d\x6f\xdc\xc6\x11\xfe\x7e\xbf\x62\xa0\x02\x86\x4e\xbd\x17\xd9\x4d\x84\xf4\x10\x25\x10\xac\x28\x55\x11\xbb\x82\x2c\xe7\x4b\x60\x44\x73\xe4\xf0\x6e\xea\xe5\x2e\xbb\xbb\xd4\x89\x30\xf4\xdf\x8b\xd9\xe5\xeb\x1d\xa5\x3a\x41\xf5\x21\x39\x92\xbb\xb3\xf3\xf2\xcc\x33\x33\xeb\xe5\xc9\xc9\x64\x72\xb7\x65\x07\x89\xd1\xde\x62\xe2\x81\xf3\x42\x51\x4e\xda\x3b\xf0\x5b\x82\x9c\x3c\xa6\xe8\x11\x9c\x47\x9d\xa2\x4d\xa1\xb0\xa6\x30\x8e\xd2\x09\x6b\xb8\xfa\xe5\xfa\x66\x7e\x7a\xf6\xb7\xb3\xc5\x64\x72\x4b\xd9\x0a\xb6\xde\x17\x6e\xb5\x5c\x6e\xd8\x6f\xcb\xf5\x22\x31\xf9\xd2\xe8\x4c\x99\xdd\x32\xfc\x67\xad\xcc\x7a\x99\xa3\xf3\x64\x97\x99\xe2\xc2\x2d\xdf\x9c\xbe\x79\x7d\xfa\xf7\xd7\x67\x73\x9d\xf9\x79\x73\xd8\x22\x4f\x27\x93\x0f\xde\x96\x89\x77\x80\x3a\x05\x4b\xce\x94\x36\x21\x07\x09\xea\x4e\x45\x30\x9a\xc0\x58\xc8\x8d\xa5\x49\xab\xa9\xaf\x0a\x72\x33\x48\x50\x29\x4a\xe1\x81\x69\xe7\x16\xf0\x13\x26\xdb\xf0\x3b\x7c\x06\x4b\x85\x25\x27\x56\x4e\x10\x52\xce\x32\xb2\x22\xef\x33\xeb\x14\x4c\xd6\x5a\x3d\x03\x57\x26\x5b\x40\x07\x08\x89\x25\xf4\xc6\xc2\x9a\xcd\xc6\x62\xb1\xad\x26\xc6\x02\xc2\x3f\x6f\x7e\xfa\x19\x38\xc7\x0d\x41\xc6\x8a\x16\x93\x93\xe5\x64\xc2\x79\x61\xac\x87\xab\x52\x6f\x78\xad\xe8\xce\x7c\x26\x0d\x99\x35\x39\x9c\x3e\x12\x7d\xf7\xe6\xbb\x6f\xcf\xd6\xd9\x9b\x53\x7a\x83\x78\x36\x99\x14\xe5\xba\xf3\xff\xbb\xfa\xe8\x5f\x45\x6f\xf8\x32\x99\x00\x00\x2c\x97\x4b\xb8\x80\x5b\x72\x46\x3d\x90\x95\x10\x3c\x70\x4a\x0e\x30\x49\xc8\x39\xf0\x06\x10\x1c\xf9\xbe\xea\xb5\xe1\xcd\xf6\x9e\x18\x17\x1c\x2b\x7e\x6b\xdc\x0a\xc7\xb4\xd8\x2c\x00\x35\xbc\xbf\xba\x9b\xee\xf9\xd8\x0b\x3c\x58\x7b\xb2\x19\x26\xd4\xca\xf1\xa6\x51\xa3\xa7\x85\x20\x26\x9c\x0b\x7e\x8b\x1e\xd8\x83\x2b\x0b\x71\xc5\x9e\x22\x62\x71\x7b\x78\x2b\xbb\x33\xf0\x4b\x58\xd5\xac\xcc\x4a\x0d\x1b\xf2\xc1\x23\xc7\xd3\x15\xfc\x76\x57\x15\xf4\xe9\x60\x89\x8d\xbb\x65\xd9\xf1\xef\x41\x8d\x15\xc8\xca\xe9\x0a\x2e\x74\x15\xe1\xf4\x63\xd8\xf5\x34\xe6\xd5\xb7\x46\x29\x4a\x3c\x1b\x0d\x2c\xf1\xde\x58\x53\x16\xe2\xd1\x80\x9a\x5a\xb8\x15\x57\xa4\xf4\x08\xeb\x0a\xae\x2f\xff\x90\x51\x3d\xf9\x87\xe6\xad\x8d\xb5\x66\x27\xaa\x37\xcb\x8f\x39\x5d\xc1\xc7\x6b\xed\xcf\xbe\x99\xae\xe0\xd5\x97\xe6\xfd\xd3\x98\x6b\xae\x2f\xa3\x63\xe2\xfa\x4f\xfb\x46\x5e\xb2\x2b\x14\x56\xd1\xae\x35\x3a\x4e\xea\x54\x08\x41\xd2\x89\x2a\x05\x4c\x12\x3c\x8d\x39\xcd\x20\x25\x97\x58\x2e\x82\xae\xa8\xd3\x2e\xe6\xdb\x32\x5f\x6b\x64\x05\x99\x60\x5f\x83\x59\xff\x9b\x12\xbf\x80\x77\xc6\xf9\xfa\xc1\x81\xdb\x9a\x52\xa5\xfb\x08\x92\x03\x0f\xfd\x55\x63\xb1\x51\xb0\x86\x7b\x73\xde\x5d\xad\x91\x44\x41\xb4\x6b\x8e\xeb\x2f\xda\xdb\xc0\x0e\x32\x26\x95\xc2\x8e\x95\x82\x35\x41\x1a\x45\x53\x0a\xac\x41\xb1\xab\x19\xc5\x6f\xc9\x52\x66\x2c\xd5\xea\x0e\xc4\xac\xc3\x5b\xeb\xc5\xc4\xc4\xe8\x84\x1d\x2d\x46\xcf\x14\x13\x14\xf9\xa0\xe4\x0a\x3e\x78\xcb\x7a\x33\x34\xe1\x02\x76\x96\xbd\x27\x3d\x70\xea\xff\xcb\x1e\x84\x94\x3c\x72\xc3\x73\x43\xb9\xb3\x81\x28\x67\x42\x5e\xaf\x29\xb0\x25\x3c\x90\x5d\x1b\xd7\x66\x3e\x14\x68\x31\xd0\x1a\xb0\x76\x9e\x30\xd0\x20\x82\x63\xbd\x51\x04\x8a\x35\x4d\x5f\x76\x41\xcf\xbc\xe7\x3c\xe1\x72\x54\xaa\x07\xa2\x96\x84\x71\xc4\x29\x5f\xe3\x93\x1a\x69\x6b\x02\x84\x1d\xad\xe7\x99\x65\xd2\xa9\xaa\x02\x13\xc3\x31\x2f\x28\xd0\xf3\x0c\x6e\xde\xff\x3c\x1d\x08\x09\xc8\xaf\xfd\x71\x88\x90\x99\x18\xfc\x19\x0a\x4b\x81\xcc\x66\x40\x3e\x79\xd9\xfa\xd6\xa8\x1e\xd7\x7c\xb9\x62\x45\x4f\x9d\x13\x58\xb3\x3f\x6e\x9f\xe4\xaf\x0f\x9b\xd9\xe0\xcb\x88\x37\x87\x0b\x5e\x38\xb0\x59\x32\xed\xf1\x8c\xfc\x39\x52\xd9\x22\xa4\xd3\x79\x38\xf9\xf0\x63\x1f\xa2\xe7\x7d\x1d\x0e\x97\x76\x51\x3c\xef\x74\x69\x97\x3d\xed\x33\x90\x68\x56\xd3\x2a\x69\xb2\x9c\xf4\x08\x32\xc4\xa2\x2b\xc8\x80\x31\x7c\xce\x1b\x4b\x29\x08\x30\x2c\x98\x2c\x83\x64\x8b\xac\x0f\x0b\x9a\x88\x76\x4d\x2c\x4b\x47\xa9\x14\x22\x4b\xa1\xa2\x4b\xc7\x10\x6a\xb3\x9b\x81\x94\x2a\x13\x93\xdf\x48\xf6\x43\x4e\x29\xe3\xb3\x94\xd4\xe9\x17\x74\x3f\xa4\xec\xd2\xb2\x70\x6e\x0d\xf5\x3d\x7b\xff\x71\x77\x77\xd3\xd9\x1c\xec\x89\x64\xdb\xd4\x6c\x69\x0b\x00\x03\xc3\xc8\x5a\x38\x36\x36\xfc\xf8\x30\x85\x8f\xb7\xbf\xd4\x94\x30\xa2\x56\x23\x78\x35\xa6\x96\x20\xb1\xb4\xea\x30\xff\x02\xf4\x7a\x5f\x46\xa1\x51\x5a\x09\x66\x69\xfb\x61\x7c\xd9\xea\x3d\x29\x96\x7c\x69\x75\x2b\xec\x79\x34\x5c\xdf\x5c\x7d\xb8\xeb\xd1\x80\x6c\x13\x3f\x75\xa0\xaa\x1b\xaa\x7e\x95\x69\x77\xd7\xc0\x90\xa6\x4c\xf7\x3a\x2f\xc9\x5e\x11\x7c\x88\x10\x79\x5b\xc3\x00\xd0\x52\x07\x8e\x54\xca\xb8\xdf\x12\xdb\xd0\x7f\x49\xad\xe2\x94\xb4\xe7\x8c\xc9\xc2\xf1\xdb\xeb\xcb\x69\x2b\xc4\x62\x00\x8d\xdf\x62\xa0\x5d\xb6\x94\x78\xf8\x78\x7b\xbd\x80\x0b\x48\x14\xcb\x5e\x2c\x0a\xc5\x49\x24\x33\xc1\x63\xe9\x28\xd6\xbe\xb7\xd7\x97\xfd\xbe\x29\x93\x2e\x53\x70\xa8\x0c\x86\x4a\x54\x5b\xf1\xc0\x28\x26\x05\x75\x37\xe8\x69\x87\xd5\xb3\xf0\x94\x45\x03\x1c\x0c\xe8\xed\xed\xf5\xa5\x40\x4d\x44\x8f\x18\x26\x6e\x0d\x7a\x85\x93\x62\xd7\xda\xdb\x3d\x90\x34\xe8\xea\x53\x93\xb8\x05\x17\x99\x5b\xb0\x59\x4a\x61\xa4\xc2\xbb\x65\x7d\xc2\x1c\xd3\xd4\x0a\xb2\xf5\x66\xf9\x22\x57\x26\xd2\xd9\x8c\x55\x88\x1b\xf4\xdb\x90\x21\x1a\x4c\xa0\x1d\x54\x50\xc8\xbb\xba\xb3\x0c\x51\xee\x75\x58\xad\xb3\x62\x34\x8c\xad\xbe\xaa\x6a\xb0\x03\xa3\x55\x05\x9a\x28\x15\xd2\xcf\x3a\xe1\xa1\xd3\x75\xa1\xa7\xfd\x1a\xa1\x5f\xe1\x1c\x11\x3b\x77\x95\xf3\x94\xbb\x97\xdd\x22\x96\x36\x7e\xf9\x71\x2f\x75\x7b\x2e\x9b\x0d\x17\x8e\x66\x72\xc2\x29\x9c\x8b\x9f\x0f\x3f\x05\x7f\x9e\x07\x19\x63\x69\xde\xb9\xaa\xd4\xb1\x57\x6d\xb2\x53\x7c\x14\x9c\xad\xd1\xf3\x03\x09\x4b\x75\x40\xfa\xb3\x18\xda\x9a\xdd\xdc\x9b\x65\x8d\x9c\xb9\xbc\x9e\x1b\x3d\xdf\xd1\x7a\xf9\x97\x78\xce\xbc\xb4\xca\x3d\xeb\xb7\xff\xc5\x48\x9c\xb5\xae\x85\xf3\x9e\x03\x86\xab\xa0\xe3\xae\x23\x51\x61\xb5\x5c\x1e\x2d\x24\x82\xe8\x8f\x1b\x7f\x4e\x9b\x17\x47\xcb\xa3\xf6\xb7\xc8\x9a\x0e\x44\x3d\x0d\x9e\xc6\xd8\xf1\xf9\x13\x9e\xe1\xcb\x93\xf0\xbf\x13\x80\x5b\x53\xa1\xf2\x15\x84\x39\xa8\x79\x79\x49\x19\x6b\x6a\x52\x3d\x2f\x8c\x43\xa9\x2c\xb6\x5e\xdb\x4e\xed\xa1\xfa\x6c\xf8\x81\x1c\xe4\x68\x3f\x93\x2f\x14\x4a\x75\x44\x28\xb5\xb0\x42\xba\x37\xe2\x9d\x80\x64\x5d\x3d\xbd\xc9\x58\x58\x8b\x64\xaa\x47\xb9\x56\xad\x77\x7d\x71\x42\x7b\xff\x29\xc9\x56\x11\x17\xf7\xb7\xcd\xa6\xfb\x86\xb8\xc2\x14\xfc\xfe\xea\xce\x41\x23\x40\x98\x50\x68\x99\x1e\x0b\x4a\x7c\xac\xdf\x05\x56\xdd\x81\x32\xb2\xc4\x4e\xc0\x6f\xc9\x11\xb8\x82\x12\xce\x6a\xa6\x1d\xaa\xb3\xec\x15\x99\xae\xc1\xe8\x46\xd5\xd8\x2e\xbb\xa6\xd7\xac\xdd\xb4\xd8\x67\xd7\x56\xed\x7d\x62\xbd\xb0\x16\xab\xe8\x4c\x19\xd7\x3f\x47\xc7\xb3\x4e\xf9\x81\xd3\x12\x55\xa7\x74\xbb\x2d\xd6\xfb\x10\xe6\x69\xe4\xbf\xd2\x5f\xeb\xcc\xb8\x15\xfc\x56\x87\xf4\xd3\xb0\xce\x86\x94\xff\x7d\x6c\xdd\x7e\xb6\x2f\x97\xf0\x2b\x2a\x4e\xd1\xd7\xfd\x85\x2b\xf3\xd0\xb8\x2b\x25\xdb\x21\x2f\x95\xe7\x42\xb1\xcc\xad\x75\xb3\xac\x8d\x97\x46\x69\x63\x09\x7d\x53\xcf\x5e\x2f\x4e\x07\x62\x1f\xd0\x82\x37\x1e\xd5\xdb\xd2\xc3\x39\x9c\xee\x7d\x96\xb4\x6f\x00\xc6\xba\xd5\x73\x24\xab\x7a\x42\xda\x9f\x7f\x6d\xbd\x9e\x94\xfe\x85\xe4\x41\xe7\xc8\xfa\xe3\x76\xdf\xf7\xe7\xa2\xe7\x0c\x72\x72\x0e\x37\xb4\x82\xa3\x0f\xd1\xd8\xf6\xfc\xaf\xb7\xf6\x68\xba\xef\xc6\x0b\xe7\x78\xa3\x63\x1a\xd5\xf2\x46\x78\xb5\x39\xe9\xfc\x70\xd1\x1e\x89\xde\xc6\x6c\xef\xcb\x0b\xb3\xc5\xd8\xf4\xde\xa2\x2d\xcc\xf0\x4d\xac\x5f\x68\xae\x46\x0e\x87\x61\x87\x15\x07\x82\x90\xc2\xd2\x2d\xf5\x71\xdf\x0e\x75\x4d\x08\x05\x28\xa1\xd3\x0a\xfc\x10\xee\x80\xc6\xf3\xe1\x60\x3e\xff\xb9\xee\xe5\x87\xf7\x5c\xb7\x94\x10\x3f\xb4\x7d\x06\xc1\x9a\x34\x65\x9c\x30\xda\x6a\x2f\xf1\x86\x4d\x0b\x06\x6f\x34\x5d\x4b\x62\x49\x50\x5d\x15\xed\xf8\x6f\x1b\xc1\x3b\xf6\xdb\xf6\x69\xb1\x21\x7f\x57\x15\x74\x3c\xdd\x0b\x40\x62\xf2\x9c\x74\x1a\xfb\xb1\x39\x7c\x74\x3d\x5c\x84\xcb\x3c\xa9\xf2\x9a\x76\x71\xd8\x8b\x1e\xb8\x52\x66\x17\xad\xb0\x43\x2b\xd8\x0d\xc7\x69\x21\x2d\x01\x57\xec\xf1\xc4\xc1\x19\x96\xca\x77\x5a\x1d\x96\xd4\x30\xc1\xa3\x52\x66\x17\x64\x96\x85\xa8\xa6\x37\x12\x24\x91\x82\x71\x30\x6f\xe6\xa3\x04\x0b\x5c\xb3\xe2\x98\x63\xa1\x43\x29\x7d\x69\xe9\xa0\x6f\x68\x4e\x5c\xc1\xdb\x76\xcb\xf7\xaf\x2e\x74\x75\x5b\x77\x4a\x5f\x06\xe1\x59\x34\xe1\x79\xfa\x61\x18\xcc\x77\x6d\xf6\xb4\x53\x54\x82\x2a\x29\x55\x24\x17\x02\xcc\x4d\xa9\xc3\x1d\xa3\x43\x45\xf0\x80\xaa\x24\x61\x41\xed\x32\xb2\xb6\x9e\xbb\x6a\xa0\x8c\xbb\xe1\xbd\xf1\x04\x73\xb8\xf6\xbd\xc9\x7d\x4d\x7e\x47\xa4\x85\x64\x82\x53\x5f\x2f\x4e\x07\xf7\x21\xf0\xd3\xa3\x6c\x89\x08\xe8\x1d\xcc\x0e\x1e\xc3\x86\x2e\xeb\xe5\xdd\xe9\xe2\xdb\x33\x59\xaa\xfb\x30\xab\xb7\xec\x9a\x33\xc3\xa2\x13\x78\x7c\xbe\x65\x09\xc8\x46\xa5\x2a\x28\xc8\x26\xa4\xbd\xf4\xe7\x1b\xea\xcd\xa9\xf1\xba\xc0\x93\xcd\x43\x56\xad\xd1\xb1\x83\xc2\xb0\xf6\x83\x76\x45\x16\x39\xa3\x38\x95\x40\xc6\x3a\xe6\x72\xb4\xbe\xbd\xf0\x75\xb0\xdb\x4a\xeb\x99\x60\x2a\x23\x89\x4c\xba\x82\xd3\xfb\x8f\x57\xfc\x78\xf6\xcd\x7d\xa4\x75\x54\x96\x30\xad\xda\xdb\xd4\xbd\xbb\x0c\x1a\x1c\x1f\xd0\x94\xa0\x13\xdf\x26\x28\x0f\xec\x1d\x98\x82\x6c\x2c\x98\x43\x1c\x4b\xe1\xd5\x9e\x2d\xa9\x4a\x58\x82\x6c\xce\x9a\x9d\xaf\x27\xf4\x0d\xd9\xde\xce\xe0\xef\xa6\x27\x28\x0b\x09\xf8\x77\xcd\xa1\x26\x83\xc2\x52\xc2\x8e\x8d\x5e\x1c\xf6\xfc\xa5\x5f\x41\x34\x69\x88\xba\x7f\x35\x8d\xfe\xe0\xc6\x23\xfe\x93\x44\x1c\xe9\x03\x1d\x04\x33\xe4\x08\xac\x42\xca\x74\xb1\x9d\x1d\xf8\xc2\x92\x8a\xea\x6e\xb9\x68\xe1\x25\x1f\xee\x77\xa8\x14\xf9\xfb\xe6\x02\x50\x98\x6e\x06\x61\xc6\xac\xfc\x56\xe4\x92\x72\x75\x21\x0d\x37\x51\x3b\x4d\x16\x72\xde\x6c\x3d\xec\x50\x47\x3a\x0d\xbd\x47\xf5\xc7\xae\xbf\x42\x41\x97\x94\x28\x64\x4e\xfc\xe3\x89\x3a\xeb\xfb\x6f\x36\x76\xd6\x7e\x63\x50\x58\x1a\x29\xc7\xc2\xf4\x3f\x84\x7a\x0e\xaf\x5e\x85\xa7\x58\x54\x61\x05\x47\x52\x62\x63\x9a\x74\xb9\xc9\x5a\x5e\x71\x0a\x16\xf5\x86\x80\x17\x04\xbf\x9d\xce\x5e\x7f\x3a\x7a\xa1\x6c\x87\x02\xd5\x92\xe7\x39\xb4\x66\x8f\x96\xd3\x58\x49\xff\xcc\x4d\x54\x53\xf2\x9e\x26\xf0\xdf\x00\x00\x00\xff\xff\xdd\xd1\xb2\x22\xc6\x1a\x00\x00"

func metadataviewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_metadataviewsCdc,
		"MetadataViews.cdc",
	)
}

func metadataviewsCdc() (*asset, error) {
	bytes, err := metadataviewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MetadataViews.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6d, 0xf7, 0x7, 0xdb, 0x39, 0x20, 0xf, 0xf2, 0x6e, 0x27, 0x86, 0x4a, 0x72, 0xee, 0x1e, 0x19, 0x51, 0x65, 0x41, 0xb7, 0x7b, 0xcd, 0xb2, 0xb6, 0x0, 0xea, 0xe1, 0xc2, 0x5d, 0xec, 0x13, 0x32}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x8f\xdb\xba\x11\xbe\xeb\x57\xcc\xcb\x03\x9a\xdd\xc0\x6b\xf7\x50\xf4\x60\x20\x68\xda\xb7\x6f\x01\x5f\xb6\x0f\x5b\x17\x3d\x04\x01\x4c\x8b\x23\x9b\x08\x45\x2a\x24\x65\xc7\x0d\xf6\xbf\x17\x33\x24\x25\xca\xf6\x26\x9b\x5b\x73\x89\x57\x22\xbf\x99\xf9\xe6\x9b\x8f\xd4\xe2\xdd\xbb\xaa\xfa\xf5\x57\x58\xef\x11\x1e\xb4\x3d\xc2\xa3\x35\x77\x0f\xbd\xd9\xa9\xad\x46\x58\xdb\xcf\x68\xc0\x07\x61\xa4\x70\x92\x17\x6e\x1e\xad\xc9\xef\xf9\xf5\x06\x6a\x6b\x82\x13\x75\x00\x65\x02\xba\x46\xd4\x58\x55\x84\x37\xfc\x09\x61\x2f\x02\x08\xad\xc1\x58\x73\xd7\x64\xf4\xc0\xe8\x79\xb7\x87\xda\xf6\x5a\xd2\xdf\x8d\x75\x2d\x04\x3b\xaf\x56\x0d\x08\xe8\x3d\x3a\x38\x0a\x13\x3c\x04\x0b\x12\x3b\x6d\x4f\x20\xc0\xe0\x11\x4c\x13\x86\xfd\x33\x08\x7b\x54\x6e\xcc\xe6\xc8\x70\x06\x51\x56\xc1\x82\x6a\x3b\x8d\x2d\x9a\x40\xcb\xe0\xbc\x88\x31\xd7\x39\xe7\x7e\x89\xb3\x17\x07\xca\x18\x1a\xab\x89\x26\x2a\x86\x80\x5c\xaf\xd1\x83\x30\x12\x8c\x68\x95\xd9\x55\x5c\x6a\x98\x54\xef\x3b\xac\x55\xa3\xd0\xcf\x13\x83\x0f\xeb\x0d\x38\xf4\xb6\x77\x99\xaa\xda\x3a\x1c\x1e\x41\x38\x75\x89\x33\x87\x9d\x43\x8f\x54\xbb\x30\xf0\xf8\xb0\x06\x65\x18\xdd\xb7\xc2\x8d\xb5\x27\xe0\xdf\xac\xd6\x58\x07\x65\xcd\x06\x9e\x26\xf8\x23\x34\xa1\xfa\x60\x1d\x65\xcd\xd4\xbe\xf5\x8c\x5b\x0f\x7b\xe7\xd5\x8a\x5a\x59\xeb\x5e\xf2\xa2\x06\x8f\xd0\xf4\x86\xdf\x71\x0b\x04\x33\x40\x59\xd8\xa3\x41\x47\x8f\x50\x78\xa5\x4f\x55\x6b\x0f\xa9\xad\x9e\x12\x25\x5a\x6c\x1f\xc0\x36\xbc\xba\x0c\xc1\xf9\xfe\xe1\xec\x41\x49\x74\x1b\x5e\xb9\x79\xc2\x1a\xd5\x81\xfe\x1c\xd2\x1d\x48\xf4\x5c\x87\x2f\x9f\x80\xc4\x5a\x0b\x87\x45\x72\x47\x15\xf6\xe0\x6d\x8b\xd0\x39\x64\xd0\xce\x7a\xa6\x49\x2a\x5e\x51\x25\x56\xbf\xf4\xca\x21\x27\x35\x72\x56\x74\xb7\x46\x17\x84\x32\xa9\xa7\x0c\xb4\xc5\xbd\x38\x28\xeb\x86\x69\xf0\x51\x29\x27\xa0\x14\x3c\x76\xc2\x89\x80\xb0\xc5\x5a\xf4\x94\x66\x80\x9d\x3a\xa0\xe7\x18\xac\x60\xfa\x21\xb6\x4a\xab\x70\xa2\x48\x7e\x4f\xfb\x04\x38\x6c\xd0\xa1\xa9\x91\x44\x1a\x15\x5c\xa6\x44\xe9\x5a\xa3\x4f\x80\x5f\x3b\xeb\x13\x5e\xa3\x50\xcb\xa8\xba\xb1\x76\x65\xc0\x1a\x04\xeb\xa0\xb5\x0e\xab\xc4\xf9\x48\xd7\x1c\x56\x34\x83\xde\xa6\xc4\x28\x29\x7f\x9e\x55\x2b\x3e\x23\xd4\xbd\x0f\xb6\x1d\x9a\x90\x48\x9b\x0c\xd0\xb4\x11\x34\x96\x16\x0e\xc2\x29\xdb\x13\xa4\x32\xbb\xd4\x0b\x82\x8f\x7a\x98\x57\xd5\x3f\x4e\xd0\x7b\xe2\x73\x40\xe6\x12\x46\xa0\x59\x4a\xca\x36\x2c\xc9\xa9\xc6\x3d\xd4\xc2\x80\x47\x23\x2b\xda\xe5\xa2\x58\xb2\xda\x3a\x44\x77\x17\xec\x1d\xfd\x3f\xe3\xd8\x24\x3c\x6a\x99\xd9\x51\x7e\x1c\x84\xa7\x99\xd2\x12\x50\x23\xa1\x6a\xd0\x28\x77\xe8\xaa\x8b\x71\x5a\x5b\x0e\x95\xa7\x8e\x54\x6f\x6c\xd8\xa3\xe3\x14\x67\x83\x2d\xb1\x37\x78\xe2\xe6\xc4\xd0\xd2\x89\x38\x1a\x8f\x0f\xeb\xaa\x71\xb6\xbd\xe8\x29\xfb\x94\x81\x3a\x3b\x88\xc4\xce\x7a\x15\x86\x4e\x82\x35\x93\x58\x6f\x7d\x35\xd5\x68\x6d\xa9\x13\x21\xca\x37\x38\x61\x7c\x83\x6e\x5e\x55\xef\x16\x55\xb5\x58\xb0\x93\xb7\x24\xde\x38\xd5\xe7\xd6\x3c\x87\x7f\x32\x74\xf9\x96\x9a\xa5\x35\x6d\x56\x6d\x67\x5d\x88\x6d\x29\xfa\xad\x7c\xe1\xed\x8b\x45\xd5\xf5\xdb\x2b\xd0\x97\xae\xfa\xad\xaa\x00\x00\x52\x56\xc1\x06\xa1\xc1\xf4\xed\x16\x1d\x7b\x42\x6c\x1d\x2b\x55\xf9\xe8\x7a\xca\x00\x7e\x55\x3e\xf0\x44\xd0\x5e\x0a\x75\x10\x2e\x6e\xfe\x57\xdf\x75\xfa\xb4\x84\x7f\xaf\x4c\xf8\xeb\x5f\x06\xf0\xdf\x0f\x31\x4d\x11\x00\x5b\x15\x02\x4a\x38\x12\xc7\xa9\x0f\x45\xaa\x54\x87\x0a\x4a\x68\xf5\x5f\x94\x69\xfb\x10\x06\x19\xe6\xb7\xb4\x78\x35\x2e\xbc\xb9\xbd\x16\x4a\xf9\x69\x34\x91\x0e\x34\xe5\x07\x25\x98\x59\xde\xa7\x8c\x54\xb5\x08\xac\xc6\xc1\x38\x2f\x7c\x31\x01\x07\x38\x8a\x02\x04\x48\x47\xf3\x32\xdb\xc5\x02\x56\x17\x7b\x95\x07\x63\x43\xf4\x5d\x10\x75\x6d\x7b\x13\xde\x7a\x36\x7b\xb1\xc3\x19\x6c\x08\x66\xc3\xad\x86\x2d\xc2\xc6\x28\xbd\x99\x5f\xe7\xe0\x3f\x29\xf4\x8d\x92\x99\xec\x19\x67\xb1\x84\xbf\x4b\xe9\xd0\xfb\xbf\x5d\xa5\xe4\x25\x3e\x92\xc6\x51\xf2\x20\x4d\x0e\x82\xb3\xaa\x42\x66\x2a\x59\xdd\x6b\x88\x2a\xd1\x5f\x28\xe8\x3e\x2e\x99\xd4\x13\xec\xb5\x6a\x56\xd3\x4b\x4b\x92\x90\x1f\xce\xff\xf1\x7a\x72\x1e\xe9\xf2\xd0\x82\x15\xa9\xef\x1b\xaf\x28\xe6\xa0\x37\xea\x4b\x8f\xb0\xba\x4f\xa4\x89\x7a\xcf\x32\xdd\x0b\x3f\x2c\x25\x40\x8d\x01\xc6\x84\xf9\xd5\xf3\x90\xe7\x53\x3c\xc3\xda\x81\x7b\xf2\x93\x94\x1c\xa9\xec\x9a\x81\x52\x0d\x79\x3f\x5f\xa5\x1a\x65\xe2\x19\x94\x32\x27\x53\x42\x19\x1d\x8f\x30\x13\x1e\x3b\x3c\xd5\x72\x59\xeb\xe3\xc3\x7a\x79\x5e\xe6\x0f\x73\x2f\x38\xb6\xd0\xa2\x54\x74\x72\x66\xb9\x7b\xc8\xb6\x59\x98\xe6\x2b\xb8\xce\x97\x89\x29\xdf\x83\x27\x3b\xa4\xcb\xc9\x70\x8d\x1a\x62\x14\x9a\x22\xd7\x8b\x8b\x54\x80\x78\x1a\x47\x46\xdc\xa4\xb4\xa6\x37\x03\xec\x4d\xfe\xb1\xba\xcf\xb5\xde\x2e\xe1\xc3\x94\x0f\xde\x48\xf7\x90\xe9\x23\xfa\xe7\xd0\xf7\x3a\xcc\x95\x84\xf7\xef\xa1\xc4\x7a\x43\x42\x59\xdd\x67\xe5\x8f\x5e\x10\x67\xaa\xed\x7d\xa0\x21\xe6\xab\xa0\x68\x11\x44\x1c\x17\xba\xd9\xa0\xa7\x51\x58\xdd\xbf\x99\x44\x7b\xae\xa6\xbf\x7e\xd0\x8d\x34\x53\x3e\xf3\xf0\x53\xad\xc8\x17\xb9\xec\xff\x29\x50\x3e\xe9\x82\xf8\x3c\x36\x42\xf0\x2f\xe1\x76\x3d\x4b\x99\x7a\x20\xa4\x2c\x5b\x70\x16\xba\x08\x5f\x76\x24\x81\xdf\x30\x3f\xb1\x05\xb7\x2f\x17\xca\x03\x33\xb8\x64\x3a\xc6\x6b\xdb\xb6\x7c\xd7\xca\x1b\xba\x7e\xab\x95\xdf\x43\x63\xdd\xf0\x71\x31\xc9\xe5\x85\xfa\xc7\x8c\xff\x20\x84\xfa\x6c\x36\xbe\x9b\x6e\xb9\x68\x87\x61\x75\xef\x6f\x6e\x97\xf0\x31\x6a\xeb\xd3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xb5\xdd\x2e\xe1\x4f\x79\x58\xaf\x1b\x46\x2a\x28\x0d\x80\xa9\x1d\x5d\x27\x26\x9f\x1f\x85\x4d\x6c\x31\xdf\xb4\x65\xfe\xfa\x18\xee\x06\xe4\x34\xd9\x5f\x5e\x14\xc6\x48\xc7\x72\x98\xd2\xd9\x20\x92\xd9\x35\xba\x4a\xd9\xdc\x2b\x7e\x27\x1c\xdf\x50\xf7\x56\xcb\xd1\x95\x53\x3e\x57\x24\x92\xef\x0d\x74\x80\x48\x5a\xbb\x84\x0f\xdf\x22\x3f\x4b\xda\xfb\x5c\xfd\x5f\xd8\xc4\xf7\x06\x24\xce\xc7\xe5\x40\x8c\xb9\x78\x90\x03\x39\x25\xd0\xb0\x29\x44\x17\x49\x1b\x95\x04\xe1\x9c\x38\xbd\x4e\x8d\x25\x60\x54\x22\x38\x0c\xbd\x33\x69\x62\x9d\x38\x65\x7b\xa2\x77\x71\xa6\x1c\xe6\x9e\xd4\xd7\x7b\xf2\x82\xae\xcb\x60\x4f\x39\x4a\x52\x37\xca\xf1\x2b\x29\xde\xc4\xcb\x2f\xe1\x2b\x71\x16\x0b\xf0\x76\x3c\xbf\x63\x73\xf8\xf3\xc1\xa1\x90\x20\x45\x10\x4c\x11\xdf\xc1\x5b\x0c\x7b\x2b\xd3\xa9\xa3\xc2\xcf\x4c\xd8\xb9\xc7\x3b\xbc\x62\xf1\x1e\x75\x33\x1f\x54\xf8\x51\xc9\x4f\xf0\xcb\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xe2\xc6\xf7\xde\xcb\xaa\x7e\x79\xad\x8f\xd7\x0e\x45\xc0\xdf\xdb\x2e\x9c\x8a\x0f\x86\xf8\x94\x5b\x86\xf4\xea\xd2\xc9\x21\x7e\x4e\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x86\xe9\x24\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x63\xf1\xcf\xe9\x34\x8c\x31\x64\x39\x8a\xf9\x18\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x33\x4d\x81\x27\xe0\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x61, 0xca, 0x9d, 0xaa, 0x66, 0x36, 0xdf, 0xbc, 0x51, 0xdb, 0x7b, 0x51, 0xd8, 0x3d, 0x6f, 0x4e, 0x9c, 0x8e, 0x50, 0x28, 0x7c, 0x18, 0x1d, 0x2, 0xb2, 0xc2, 0x2b, 0x26, 0xa1, 0xfe, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleNFT.cdc":           examplenftCdc,
	"ExtendedRoyaltyUtils.cdc": extendedroyaltyutilsCdc,
	"MetadataViews.cdc":        metadataviewsCdc,
	"NonFungibleToken.cdc":     nonfungibletokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"ExtendedRoyaltyUtils.cdc": {extendedroyaltyutilsCdc, map[string]*bintree{}},
	"MetadataViews.cdc": {metadataviewsCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
